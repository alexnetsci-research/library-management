openapi: 3.0.0
info:
  title: Library Management Application
  description: Demo application for managing a library
  version: 2.0.0

paths:
  /authors:
    get:
      tags:
        - Authors
      summary: Retrieve a list of authors
      responses:
        '200':
          description: The list of authors as array of objects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/authorResponse'
    post:
      tags:
        - Authors
      summary: Create an author
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/authorRequestBody'
      responses:
        '201':
          description: The author object created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authorResponse'
        '400':
          description: If validation fails, a Bad Request HTTP status will be returned instead

  /authors/{authorId}:
    parameters:
      - $ref: '#/components/parameters/authorId'
    get:
      tags:
        - Authors
      summary: Retrieve an author by id
      responses:
        '200':
          description: An object of the author
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authorResponse'
        '404':
          description: If the authorId doesn't exists, a Not Found HTTP status will be returned instead
    put:
      tags:
        - Authors
      summary: Update an author
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/authorRequestBody'
      responses:
        '204':
          description: If the author has been successfully updated, a No Content HTTP status will be returned
        '400':
          description: If validation fails, a Bad Request HTTP status will be returned instead
        '404':
          description: If the authorId doesn't exists, a Not Found HTTP status will be returned instead
    delete:
      tags:
        - Authors
      summary: Delete an author
      responses:
        '204':
          description: If the author has been successfully removed, a No Content HTTP status will be returned
        '404':
          description: If the authorId doesn't exists, a Not Found HTTP status will be returned instead

  /publishers:
    get:
      tags:
        - Publishers
      summary: Retrieve a list of publishers
      responses:
        '200':
          description: The list of publishers as array of objects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/publisherResponse'
    post:
      tags:
        - Publishers
      summary: Create a publisher
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/publisherRequestBody'
      responses:
        '201':
          description: The publisher object created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/publisherResponse'
        '400':
          description: If validation fails, a Bad Request HTTP status will be returned instead

  /publishers/{publisherId}:
    parameters:
      - $ref: '#/components/parameters/publisherId'
    get:
      tags:
        - Publishers
      summary: Retrieve a publisher by id
      responses:
        '200':
          description: An object of the publisher
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/publisherResponse'
        '404':
          description: If the publisherId doesn't exists, a Not Found HTTP status will be returned instead
    put:
      tags:
        - Publishers
      summary: Update a publisher
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/publisherRequestBody'
      responses:
        '204':
          description: If the publisher has been successfully updated, a No Content HTTP status will be returned
        '400':
          description: If validation fails, a Bad Request HTTP status will be returned instead
        '404':
          description: If the publisherId doesn't exists, a Not Found HTTP status will be returned instead
    delete:
      tags:
        - Publishers
      summary: Delete a publisher
      responses:
        '204':
          description: If the publisher has been successfully removed, a No Content HTTP status will be returned
        '404':
          description: If the publisherId doesn't exists, a Not Found HTTP status will be returned instead

  /books:
    get:
      tags:
        - Books
      summary: Retrieve a list of books
      responses:
        '200':
          description: The list of books as array of objects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/bookResponse'
    post:
      tags:
        - Books
      summary: Create a book
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/bookRequestBody'
      responses:
        '201':
          description: The book object created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/bookResponse'
        '400':
          description: If validation fails, a Bad Request HTTP status will be returned instead

  /books/{bookId}:
    parameters:
      - $ref: '#/components/parameters/bookId'
    get:
      tags:
        - Books
      summary: Retrieve a book by id
      responses:
        '200':
          description: An object of the book
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/bookResponse'
        '404':
          description: If the bookId doesn't exists, a Not Found HTTP status will be returned instead
    put:
      tags:
        - Books
      summary: Update a book
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/bookRequestBody'
      responses:
        '204':
          description: If the book has been successfully updated, a No Content HTTP status will be returned
        '400':
          description: If validation fails, a Bad Request HTTP status will be returned instead
        '404':
          description: If the bookId doesn't exists, a Not Found HTTP status will be returned instead
    delete:
      tags:
        - Books
      summary: Delete a book
      responses:
        '204':
          description: If the book has been successfully removed, a No Content HTTP status will be returned
        '404':
          description: If the bookId doesn't exists, a Not Found HTTP status will be returned instead

  /genres:
    get:
      tags:
        - Genres
      summary: Retrieve a list of genres
      responses:
        '200':
          description: The list of genres as array of objects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/genreResponse'
    post:
      tags:
        - Genres
      summary: Create a genre
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/genreRequestBody'
      responses:
        '201':
          description: The genre object created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/genreResponse'
        '400':
          description: If validation fails, a Bad Request HTTP status will be returned instead

  /genres/{genreId}:
    parameters:
      - $ref: '#/components/parameters/genreId'
    get:
      tags:
        - Genres
      summary: Retrieve a genre by id
      responses:
        '200':
          description: An object of the genre
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/genreResponse'
        '404':
          description: If the genreId doesn't exists, a Not Found HTTP status will be returned instead
    put:
      tags:
        - Genres
      summary: Update a genre
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/genreRequestBody'
      responses:
        '204':
          description: If the genre has been successfully updated, a No Content HTTP status will be returned
        '400':
          description: If validation fails, a Bad Request HTTP status will be returned instead
        '404':
          description: If the genreId doesn't exists, a Not Found HTTP status will be returned instead
    delete:
      tags:
        - Genres
      summary: Delete a genre
      responses:
        '204':
          description: If the genre has been successfully removed, a No Content HTTP status will be returned
        '404':
          description: If the genreId doesn't exists, a Not Found HTTP status will be returned instead

components:
  parameters:
    authorId:
      name: authorId
      in: path
      required: true
      schema:
        type: integer

    publisherId:
      name: publisherId
      in: path
      required: true
      schema:
        type: integer

    bookId:
      name: bookId
      in: path
      required: true
      schema:
        type: integer

    genreId:
      name: genreId
      in: path
      required: true
      schema:
        type: integer

  schemas:
    authorResponse:
      type: object
      properties:
        authorId:
          type: integer
          readOnly: true
        firstName:
          type: string
        lastName:
          type: string
        creationDate:
          type: string
          format: datetime
        updatedDate:
          type: string
          format: datetime
      example:
        authorId: 1
        firstName: 'Author First Name'
        lastName: 'Author Last Name'
        creationDate: '2023-01-01 00:00:00'
        updatedDate: '2023-01-01 00:00:00'

    publisherResponse:
      type: object
      properties:
        publisherId:
          type: integer
          readOnly: true
        name:
          type: string
        creationDate:
          type: string
          format: datetime
        updatedDate:
          type: string
          format: datetime
      example:
        publisherId: 1
        name: 'Publisher Name'
        creationDate: '2023-01-01 00:00:00'
        updatedDate: '2023-01-01 00:00:00'

    bookResponse:
      type: object
      properties:
        bookId:
          type: integer
          readOnly: true
        title:
          type: string
        creationDate:
          type: string
          format: datetime
        updatedDate:
          type: string
          format: datetime
        publisher:
          allOf:
            - readOnly: true
            - $ref: '#/components/schemas/publisherResponse'
        authors:
          readOnly: true
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/authorResponse'
        genre:
          allOf:
            - readOnly: true
            - $ref: '#/components/schemas/genreResponse'
      example:
        bookId: 1
        title: 'Book Title'
        creationDate: '2023-01-01 00:00:00'
        updatedDate: '2023-01-01 00:00:00'
        publisher:
          id: 1
          name: 'Publisher Name'
          creationDate: '2023-01-01 00:00:00'
          updatedDate: '2023-01-01 00:00:00'
        authors:
          - id: 1
            firstName: 'Author First Name'
            lastName: 'Author Last Name'
            creationDate: '2023-01-01 00:00:00'
            updatedDate: '2023-01-01 00:00:00'
        genre:
          id: 1
          name: 'Genre Name'
          creationDate: '2023-01-01 00:00:00'
          updatedDate: '2023-01-01 00:00:00'

    genreResponse:
      type: object
      properties:
        genreId:
          type: integer
          readOnly: true
        name:
          type: string
        creationDate:
          type: string
          format: datetime
        updatedDate:
          type: string
          format: datetime
      example:
        genreId: 1
        name: 'Genre Name'
        creationDate: '2023-01-01 00:00:00'
        updatedDate: '2023-01-01 00:00:00'

    authorRequestBody:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
      example:
        firstName: 'Author First Name'
        lastName: 'Author Last Name'

    publisherRequestBody:
      type: object
      properties:
        name:
          type: string
      example:
        name: 'Publisher Name'

    bookRequestBody:
      type: object
      properties:
        title:
          type: string
        publisherId:
          type: integer
        authors:
          type: array
          minItems: 1
          items:
            type: integer
        genreId:
          type: integer
      example:
        title: 'Book Title'
        publisherId: 1
        authors:
          - 1
        genreId: 1

    genreRequestBody:
      type: object
      properties:
        name:
          type: string
      example:
        name: 'Genre Name'

tags:
  - name: Authors
  - name: Publishers
  - name: Books
  - name: Genres
